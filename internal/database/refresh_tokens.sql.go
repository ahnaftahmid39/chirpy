// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO
  refresh_tokens (
    token,
    created_at,
    updated_at,
    user_id,
    expires_at,
    revoked_at
  )
VALUES
  ($1, NOW (), NOW (), $2, $3, NULL) RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
DELETE FROM
  refresh_tokens
`

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRefreshTokens)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT
  token, created_at, updated_at, user_id, expires_at, revoked_at
FROM
  refresh_tokens
WHERE
  token = $1
LIMIT
  1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshTokenByUserId = `-- name: GetRefreshTokenByUserId :one
SELECT
  token, created_at, updated_at, user_id, expires_at, revoked_at
FROM
  refresh_tokens
WHERE
  user_id = $1
LIMIT
  1
`

func (q *Queries) GetRefreshTokenByUserId(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshTokenByToken = `-- name: RevokeRefreshTokenByToken :one
UPDATE
  refresh_tokens
SET
  revoked_at = $2,
  updated_at = $3
WHERE
  token = $1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RevokeRefreshTokenByTokenParams struct {
	Token     string       `json:"token"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) RevokeRefreshTokenByToken(ctx context.Context, arg RevokeRefreshTokenByTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshTokenByToken, arg.Token, arg.RevokedAt, arg.UpdatedAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
